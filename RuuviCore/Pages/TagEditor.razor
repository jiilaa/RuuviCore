@page "/edit/{tagId}"
@using net.jommy.RuuviCore.Interfaces
@using global::Orleans
@using net.jommy.RuuviCore.Common
@using InputType = BlazorStrap.InputType
@using System.Globalization
@inject IGrainFactory GrainFactory
@inject NavigationManager NavigationManager

<h1>RuuviTag (@TagId) settings</h1>

<BSForm Model="@RuuviTag" OnValidSubmit="@HandleValidSubmitAsync">
        <DataAnnotationsValidator />
        <ValidationSummary />
        @if (TagId == "NewTag")
        {
            <div>
                <BSLabel For="macAddress">MAC address:</BSLabel>
                <BSInput Id="macAddress" InputType="InputType.Text" PlaceHolder="Enter MAC address" @bind-Value="MacAddress"/>
            </div>
        }
        <div>
            <BSLabel For="name">Name:</BSLabel>
            <BSInput Id="name" InputType="InputType.Text" @bind-Value="RuuviTag.Name"/>
        </div>
        <div Class="@BS.Form_Check @BS.Form_Switch">
            <BSInputCheckbox CheckedValue="@("on")" @bind-Value="StoreName"/>
            <BSLabel IsCheckLabel="true">Store name with measurement data</BSLabel>
        </div>
        <div>
            <BSLabel For="dataSavingInterval">Data saving interval (seconds)</BSLabel>
            <BSInput InputType="InputType.Number" @bind-Value="DataSavingInterval" />
        </div>
        <div Class="@BS.Form_Check @BS.Form_Switch">
            <BSInputCheckbox CheckedValue="@("on")" @bind-Value="StoreAcceleration"/>
            <BSLabel IsCheckLabel="true">Store acceleration valies with measurement data</BSLabel>
        </div>
        <div Class="@BS.Form_Check @BS.Form_Switch">
            <BSInputCheckbox CheckedValue="@("on")" @bind-Value="AllowMeasurementsThroughGateway"/>
            <BSLabel IsCheckLabel="true">Allow measurement data to be submitted through HTTP gateway also (e.g. when RuuviTag is too far for RuuviCore to hear)</BSLabel>
        </div>
        <div Class="@BS.Form_Check @BS.Form_Switch">
            <BSInputCheckbox CheckedValue="@("on")" @bind-Value="DiscardMinMaxValues"/>
            <BSLabel IsCheckLabel="true">Discard min or max values (usually an indication of a faulty blueltooth packet).</BSLabel>
        </div>
        <div Class="@BS.Form_Check @BS.Form_Switch">
            <BSInputCheckbox CheckedValue="@("on")" @bind-Value="IncludeInDashboard"/>
            <BSLabel IsCheckLabel="true">Show current data of this RuuviTag in the dashboard</BSLabel>
        </div>
        <BSButton Color="BSColor.Primary" ButtonType="ButtonType.Submit" @onclick="@(() => HandleValidSubmitAsync())">Save</BSButton>
</BSForm>

@code {
    [Parameter]
    public string TagId { get; set; }
    
    private string StoreName { get; set; } = "off";
    private string StoreAcceleration { get; set; } = "off";
    private string AllowMeasurementsThroughGateway { get; set; } = "off";
    private string DiscardMinMaxValues { get; set; } = "off";
    private string IncludeInDashboard { get; set; } = "on";
    private string DataSavingInterval { get; set; } = "60";

    private RuuviTag RuuviTag { get; set; } = new ();

    private string MacAddress { get; set; } = ""; 

    protected override async Task OnInitializedAsync()
    {
        if (TagId != "NewTag")
        {
            RuuviTag = await GrainFactory.GetGrain<IRuuviTag>(Guid.Parse(TagId)).GetTag();
            StoreAcceleration = RuuviTag.StoreAcceleration ? "on" : "off";
            StoreName = RuuviTag.StoreName ? "on" : "off";
            DataSavingInterval = RuuviTag.DataSavingInterval.ToString(CultureInfo.InvariantCulture);
            IncludeInDashboard = RuuviTag.IncludeInDashboard ? "on" : "off";
            DiscardMinMaxValues = RuuviTag.DiscardMinMaxValues ? "on" : "off";
        }
    }

    private async Task HandleValidSubmitAsync()
    {
        if (TagId == "NewTag")
        {
            if (string.IsNullOrWhiteSpace(MacAddress))
            {
                // TODO: Figure out how to show error in the UI or disable the button
                throw new Exception("Invalid MAC Address");
            }
            
            RuuviTag.MacAddress = MacAddress;
            RuuviTag.StoreAcceleration = IsOn(StoreAcceleration);
            RuuviTag.StoreName = IsOn(StoreName);
            RuuviTag.DataSavingInterval = int.Parse(DataSavingInterval);
            RuuviTag.IncludeInDashboard = IsOn(IncludeInDashboard);
            RuuviTag.DiscardMinMaxValues = IsOn(DiscardMinMaxValues);
            await GrainFactory.GetGrain<IRuuviTag>(MacAddress.ToActorGuid()).Edit(RuuviTag);
        }
        else
        {
            await GrainFactory.GetGrain<IRuuviTag>(Guid.Parse(TagId)).Edit(RuuviTag);
        }

        NavigationManager.NavigateTo("/taglist");
    }

    private static bool IsOn(string storeAcceleration)
    {
        return storeAcceleration == "On";
    }
}
